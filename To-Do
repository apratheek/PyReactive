1. Override all data types and have modify the "append" method to trigger a cascading effect on all depending Observables and Subscriptions
2. Have an onchange method for data types, Observe, and Subscribe classes that can be overriden.
3. Have a Trigger() method that will trigger when a case is true.
4. Have a change() method on both Observe and Subscribe classes. This method changes the existing value to the new value and updates the state of the corresponding objects.
        i) the change(self, value) method in Observe would change the existing value to the passed value and triggers a cascade effect to modify the subscriptions replying on it.
        ii)the extend(self, **args) method would perform the job of change() in the Subscribe class. It takes in the additional variables (either Observables or Subscriptions) and the corresponding operators and updates the equation of the Subscription.
        iii)have an evaluate(self) method for both Observe and Subscribe classes that would evaluate to the current value 
5. Definitions : a) Data types are overriden fundamental data types that have a few additional powers such as cascading effect
                 b) Observables are objects that observe data types and/or are limited to acting upon unary operators or in-place methods such as sorted, max, min, etc.
                 c) Subscriptons are objects that subscribe to Observables or other Subscriptions using binary operators. They can be composite equations with multiple operands and operators. They can't be composed of simple data types.

The process flow is as follows:
1. When the value of a variable changes, this needs to cascade into an updation of Observables that depend on this variable, and a change in the Observables would trigger a change in the Subscriptions that consist these Observables.
        update(Variable) --> evaluate(Observable) --> evaluate(Subscription), evaluate(cascading Observables) --> evaluate(cascading Subscriptions)

2. When an Observable changes(), this should cascade into a corresponding effect on the Subscription that is based on it.
        change(Observable) --> evaluate(Subscription), evaluate(Cascading Observables such as sorted, max, min, etc.) --> evaluate(Cascading Subscriptions)
        In this case, the original Observable is changed to observe some other value, and hence the depending subscription needs to be reevaluated

3. When a Subscription extends(), this should evaluate(self) and also evaluate(depending observables) and evaluate(depending subscriptions).
        extend(Subscription) --> evaluate(Subscription) --> evaluate(depending subscription), evaluate(depending observables)
        
***************************************************************************************************************************

Create a complex graph with the following dictionaries.

1. observables_depending_on_simple_variables --> dictionary with KEY : VALUE as 'VARIABLE' : [LIST OF OBSERVABLES]
2. objects_depending_on_observables --> dictionary with KEY : VALUE as 'OBSERVABLE' : [LIST OF OBSERVABLES AND SUBSCRIPTIONS]
3. objects_depending_on_subscriptions --> dictionary with KEY : VALUE as 'SUBSCRIPTION' : [LIST OF OBSERVABLES AND SUBSCRIPTIONS]
4. Figure out a way for this case:
                Obs(a), Obs(b) --> c = Sub(a+b) --> d = Sub(c,a)
                Here, when 'a' changes, 'c' changes, and 'd' changes. 
                But according to the current algo, 'd' is evaluated twice, once when 'a' changes -> then, the old value of 'c' and new value of 'a' are used to compute 'd', and then again when the new value of 'c' is found, then, the new value of 'c' and new value of 'a' are used to reevaluate 'd'.
                This causes multiple times of evaluation of something that should've been done in one single step.
                Identify a graph that could avoid this and hence save on computations.

Strip down the functionality of each get() by allowing it to only return the current value, rather than evaluating it. This was the fundamental problem with the previous algo, since the new value was being evaluated only after calling the get() method, rather than being updated automatically.




***************************************************************************************************************************

Mutable Objects: List, Dict, Set, ByteArray ------ Have default methods that can be overridden to create a cascading effect on the variables that depend on them
Immutable Objects: Int, Float, Complex, String, Tuple, Frozen Set, Bytes ------ Makes no sense in subclassing them since that would open up a pandora's box of errors. Instead, define these as Observables


Observables -----> Observables are mutable objects with a dependency on either a Mutable Object (although mutable objects in the sense of their definition are themselves Observables, but by doing this, we can ensure that the API is consistent), a special method defined over a Mutable Object (such as sort, count, etc.), or over an Immutable Object
            -----> When a Mutable Object changes, the Observable depending on it automatically changes. If an Observable is manually updated, and if it depends on a Mutable Object, then the underlying mutable object also needs to change (Although AFAIK, this should be done automatically since the replacement would be in-place).

Subscriptions -----> Subscriptions are mutable objects that depend on other mutable objects and/or Observables, with one or more operands.
              -----> Extend the operators by having a provision to override a method so that user-defined operators could be used too. For eg.: In case the user wants to denote an integral as '***', have the provision to do this.
              
              The dependency graph is as follows:
              
                        ------------------      2-way dependency     -------------
                        |  Subscription  |   <-------------------->  |  Mutable  |
                        ------------------                           -------------
                                ^                                          ^
                                |                                          |
                                | 2-way dependency        2-way dependency |
                                |                                          |
                                |        ----------------                  |
                                -------> |  Observable  |  <----------------
                                         ----------------
                                                |
                                                |
                                                | 1-way dependency
                                                |
                                                v
                                          -------------
                                          | Immutable |
                                          -------------




NOTE: ListB(ListA) works only by defining ListB as a copy of ListA. Hence, any further changes on ListA wouldn't affect ListB and vice versa. In case we need to observe a List, use the Observable API, since an Observable would fit the bill more appropriately.
